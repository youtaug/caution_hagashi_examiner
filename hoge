import argparse
import collections
import traceback
from datetime import datetime, timedelta, timezone, time, date
import logging
import os
import sys
import time
import gspread
import pandas as pd
import collections

from slack_tools import Slack
from dateutil.relativedelta import relativedelta
from common_japanese import get_spread_sheet
# import locale

# datetimeのタイムゾーンを日本時間に変更する
JST = timezone(timedelta(hours=+9), 'JST')

# ITPCでの実行時にstrftimeでエラーが出るのでロケール情報を日本に変更しておく
# locale.setlocale(locale.LC_CTYPE, "Japanese_Japan.932")

"""
1ヶ月(16日切り替わり)で剥がしが２回以上の添削者がいたら、通知してくれるbot

python caution_hagashi_examiner.py
で実行(#c33_朝剥がしand夜催促に投稿)
python caution_hagashi_examiner.py test
で文面表示(slack投稿はされない)
"""


class CautionHagashiExaminer:
    def __init__(self, colab=False, test=False, opt_date: str = None):
        self.colab = colab
        # if not colab:
        #     locale.setlocale(locale.LC_CTYPE, "Japanese_Japan.932")
        self.test = test
        # delay_recordのシートID
        # URLはhttps://docs.google.com/spreadsheets/d/1uR-t06V5q-pl4Ufi1bTsplSdh0ppi8YEDLDpwswO1YQ/edit#gid=1831382366
        self.hagashi_sskey = "1uR-t06V5q-pl4Ufi1bTsplSdh0ppi8YEDLDpwswO1YQ"
        # 国語科添削者リスト2022のシートID
        # URLはhttps://docs.google.com/spreadsheets/d/1CgGYryAr0P_VmATu7RvasQs-M9VwJgeA-EIlFnKEKsM/edit#gid=0
        self.examiner_list_sskey = "1CgGYryAr0P_VmATu7RvasQs-M9VwJgeA-EIlFnKEKsM"
        # 剥がし情報の載っているシート名
        self.hagashi_sheet_name = "hagashi"
        # 全種の情報が載っているシート名
        self.zenshu_sheet_name = "list"
        # 剥がし情報の載っているシートをpandas.DataFrameとして取得する
        self.hagashi_df = get_spread_sheet(sskey=self.hagashi_sskey, sheet_name=self.hagashi_sheet_name,
                                           colab=self.colab)
        self.zenshu_df = get_spread_sheet(sskey=self.examiner_list_sskey, sheet_name=self.zenshu_sheet_name,
                                          colab=self.colab)
        # datetime関連
        self.now = datetime.now(JST)
        self.today = self.now.date()
        # 任意の日時で実行したい場合
        if opt_date is not None:
            self.opt_date = datetime.strptime(opt_date, "%Y/%m/%d").date()
        else:
            self.opt_date = None
        # Slack関連
        # 安藤さんメンション
        # self.mention = "<@U014X88DX4Z>"
        self.mention = ""
        # 剥がし催促報告のチャンネルID
        self.hagashi_ch_id = "CM7349AB1"
        # テストチャンネルのID
        self.test_ch_id = "CLVB7PAAF"
        # リーダーWSのトークン
        self.token_leaders = 'xoxp-576468181220-854959979253-1325064529862-4666c71e9c8e1e29694e5107561ff0d9'

    def get_hagashi_info(self):
        """
        剥がしスプシから剥がし添削者の情報を取得し、直近1ヶ月で2回以上剥がされた人の剥がし記録を返す。
        返り値は{添削者番号 氏名:回数}   例:{N0123456 東進太郎: 2}
        """
        hagashi_rec_dict = dict()
        output_hagashi_rec_dict = dict()
        output_zenshu_hagashi_rec_dict = dict()
        zenshu_list = self.get_zenshu_list()
        # 直近30日間の回数でカウントする
        if self.opt_date is not None:
            from_date = self.opt_date - relativedelta(months=1)
            to_date = self.opt_date
        else:
            from_date = self.today - relativedelta(months=1)
            to_date = self.today
        # 一旦期間内の剥がし情報を全て取得する
        for i, row in self.hagashi_df.iterrows():
            # 記録のUPDATE
            str_hagashi_time = row["UPDATE_TIME"]
            str_hagashi_date = str_hagashi_time.split(" ")[0]
            hagashi_date = datetime.strptime(str_hagashi_date, '%Y/%m/%d').date()
            if from_date <= hagashi_date <= to_date:
                key = row["ID"] + " " + row["name"]
                value = hagashi_rec_dict.setdefault(key, [hagashi_date])
                if value is not None:
                    hagashi_rec_dict[key].append(hagashi_date)
        keys = hagashi_rec_dict.keys()
        # その日に剥がしがあって無断剥がし2回以上の人と、全種剥がしのリストを作成
        for key in keys:
            hagashi_nums = hagashi_rec_dict[key]
            if to_date in hagashi_nums:
                hagashi_times = len(collections.Counter(hagashi_nums))
                if hagashi_times >= 2:
                    output_hagashi_rec_dict[key] = hagashi_times
                for zenshu in zenshu_list:
                    if zenshu == key:
                        output_zenshu_hagashi_rec_dict[key] = hagashi_times
        return output_hagashi_rec_dict, output_zenshu_hagashi_rec_dict

    def get_zenshu_list(self):
        # 全種のリストを取得
        examiner_df = self.zenshu_df
        zenshu_df = examiner_df[examiner_df["plan"] == "全種枠"]
        zenshu_list = list()
        for i, row in zenshu_df.iterrows():
            zenshu_id_name = row["ID"] + " " + row["氏名"]
            zenshu_list.append(zenshu_id_name)
        return zenshu_list

    def send_message(self):
        # get_hagashi_infoで得られた情報を成形してSlackに送信
        hagashi_rec_dict, zenshu_hagashi_rec_dict = self.get_hagashi_info()
        message = ""
        if self.test:
            message += "テストです。\n"
        else:
            message += self.mention + "\n"
        if self.opt_date is None:
            message += self.today.strftime("%m月%d日")
        else:
            message += self.opt_date.strftime("%m月%d日")
        message += "の分です\n"
        if len(hagashi_rec_dict) == 0:
            message += "剥がしはいません"
        else:
            keys = hagashi_rec_dict.keys()
            for key in keys:
                message += key + " さん直近1ヶ月で" + str(hagashi_rec_dict[key]) + "回目の無断剥がしです\n"
        if len(zenshu_hagashi_rec_dict) == 0:
            message += "全種剥がしはいません"
        else:
            message += "全種剥がしは以下です\n"
            for key in zenshu_hagashi_rec_dict.keys():
                message += key + " さん直近1ヶ月で" + str(zenshu_hagashi_rec_dict[key]) + "回目の無断剥がしです\n"
        print(message)
        # 剥がしが存在するときだけSlackに送信する
        if len(hagashi_rec_dict) != 0 or len(zenshu_hagashi_rec_dict) != 0:
            if self.test:
                sl = Slack(token=self.token_leaders)
                sl.chat_postMessage(channel=self.test_ch_id, text=message)
            else:
                sl = Slack(token=self.token_leaders)
                sl.chat_postMessage(channel=self.hagashi_ch_id, text=message)


def get_option():
    # make parser
    parser = argparse.ArgumentParser(description="剥がし添削者通知プログラム")
    parser.add_argument("-d", "--date", default=None, help="今日の日付では無く指定した日付で実行したい場合に指定")
    parser.add_argument("-c", "--colab", action='store_true', help="Google Colabで実行する際に指定する")
    parser.add_argument("-t", "--test", action='store_true', help="テスト実行の際に指定する。Slackのテストチャンネルに投稿")
    opt_args = parser.parse_args()
    return opt_args


def execute(options):
    # 実行用の関数
    exe = CautionHagashiExaminer(opt_date=options.date, test=options.test, colab=options.colab)
    exe.get_hagashi_info()
    exe.send_message()


if __name__ == "__main__":
    args = get_option()
    execute(args)
